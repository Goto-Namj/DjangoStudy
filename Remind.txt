장고 프레임워크 구성
    djangoproject
    ├── manage.py
    ├── mysite
        ├── settings.py
                    ALLOWED_HOSTS : 애플리케이션을 배포할 때 쓸 호스트 이름을 추가, 비어있다면, 127뭐시기 로컬뭐시기 [::1]가 기본설정되어있음
                    TIME_ZONE : 'Asia/Seoul'로 변경을 통해 웹사이트의 시간대를 설정할 수 있다.
                    STATIC_ROOT = os.path.join(BASE_DIR, 'static')  :  정적파일 경로를 추가 (STATIC_URL 아래에 작성이 국룰)
                    INSTALLED_APPS : 어플리케이션 생성 했으면 연결시키기 위해 , 뒤에 어플리케이션 이름을 추가
        ├── urls.py
                    django.urls로 부터 include 함수 추가
                    urlpatterns : path(해당 주소로 오면, 무엇을 줄지)
                    inclue(줄거있는 로컬 경로)
        ├── wsgi.py
        └── __init__.py
    └── blog
        ├── migrations
            └── __init__.py
        ├── __init__.py
        ├── tests.py
        ├── admin.py
                    from django.contrib import admin
                    from .models import Post
                    admin.site.register(Post) : 포스트 모델 가져옴
        ├── models.py
                    Model 객체 생성하는 곳
                    models는 django.db로부터 import해야함
                    class Post(models.Model):   모델을 정의
                    a = models.CharField(max_length=1)    글자 수가 제한된 텍스트를 정의
                    b = models.TextField()    글자 수에 제한이 없는 텍스트를 정의
                    c = models.DateTimeField(default=timezone.now)  날짜와 시간 정의 timezone은 django.utils로 부터 import해야함
                                            (blank=True, null=True) 날짜와 시간 비워둬도 된다는거같음
                    d = models.ForeignKey('auth.User', on_delete=models.CASCADE)    다른 모델에 대한 링크
        ├── views.py
                    url에서 view.post_list 랬으니까 post_list를 만들어야함
                    def post_list(request):     요청(req)을 넘겨받아
                        posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')      쿼리셋 생성
                        return render(request, 'blog/post_list.html', {'posts': posts})       render메서드 호출(render 메서드는 누가바도 import해오겠지?)
                                {}는 템플릿 사용을 위한 쿼리셋이 들어갈 곳 ''이 매개변수 이름이라고 한다.
                    from django.shortcuts import render, get_object_or_404      404? 나중에 pk=pk에서 없는 pk하면 호출할 애임
                    from .models import Post
                    from django.utils import timezone
                    from .forms import PostForm
                    from django.shortcuts import redirect
                    def post_detail(request, pk):
                        post = get_object_or_404(Post, pk=pk)
                        return render(request, 'blog/post_detail.html', {'post': post})
                    def post_new(request):
                        if request.method == "POST":                폼에 입력된 데이터를 view페이지로 가지고 온다.
                            form = PostForm(request.POST)           html에서 method="POST"했기 때문에 request.POST해야함 GET말고 POST
                            if form.is_valid():                     
                                post = form.save(commit=False)      이번경우에만 작성자의 정보를 추가하고 저장해야 하므로 commit=False 사용
                                post.author = request.user          
                                post.published_date = timezone.now()
                                post.save()
                                return redirect('post_detail', pk=post.pk)      새 글을 작성한 후에 post_detail 페이지로 이동하도록 함
                        else:                                       처음 페이지에 접속했을 때 새 글을 쓸 수 있게 폼이 비어있어야한다.
                            form = PostForm()
                        return render(request, 'blog/post_edit.html', {'form': form})
                    def post_edit(request, pk):                     new와의 차이점 매개변수로 pk를 받아 관리함.
                        post = get_object_or_404(Post, pk=pk)       수정하고자 하는 글의 Post 모델을 가져와 인스턴스에 담는다.
                        if request.method == "POST":
                            form = PostForm(instance=post)        request.POST를 지웠다.
                            if form.is_valid():
                                post = form.save(commit=False)
                                post.author = request.user
                                post.published_date = timezone.now()
                                post.save()
                                return redirect('post_detail', pk=post.pk)
                        else:
                            form = PostForm(instance=post)
                        return render(request, 'blog/post_edit.html', {'form': form})

        ├── urls.py
                    from django.urls import path
                    from . import views
                    urlpatterns = [
                        path('', views.post_list, name='post_list'),
                        path('post/<int:pk>/', views.post_detail, name='post_detail'),      url을 보면 post/그리고 / 는 고정적으로 와야하는 url이다.
                                                                                            <int:pk>는 기대하고있는 정수값이 오면 pk라는 변수에 담음 이를 뷰로 전송함.
                        path('post/<int:pk>/edit/', views.post_edit, name='post_edit'),
                        path('post/new', views.post_new, name='post_new'),
                    ]
                            : views.post_list를 보여주라고 하는것 views는 임폴트했자너
                            : name='post_list'는 URL에 이름을 붙인것으로, 뷰 식별에 쓰임

        ├── forms.py
                from django import forms
                from .models import Post
                class PostForm(forms.ModelForm):
                    class Meta:                     이 폼을 만들기 위해서는 어떤 모델이 쓰여야 하는지
                        model = Post
                        fields = ('title', 'text',)     뷰에서 이 폼을 사용해 템플릿에서 보여주면 폼을 사용하게 되는 것.

        ├── templates       blog아래의 template아래의 blog (blog 두개)를 만드는 이유는 나중에 폴더 구조가 복잡해 질 때 좀더 쉽게 찾기 위해 사용하는 관습적인 방법이기 때문에
            └── blog
                ├── post_list.html
                            이게 첫 템플릿이다. 템플릿이란 서로 다른 정보를 일정한 형태로 표시하기위해 재사용 가능한 파일이다.
                            html 형식으로 작성하면 된다.
                            html 팁!
                                head는 소프트웨어 (문서 정보를 가지고 있지만 보이지 않는 정보를 담는 영역)
                                body는 하드웨어 (보이는 거)
                            {{ posts }} 코드를 통해 쿼리셋에 해당하는 정보를 출력한다.

                            {% for post in posts %}
                                {{ post }}
                            {% endfor %}            코드를 사용하면, 파이썬 for문처럼 쿼리셋에 해당하는 정보를 돌며 내용을 출력한다.

                            for 문 사이에 
                            <div>
                                <p>published: {{ post.published_date }}</p>
                                <h1><a href="">{{ post.title }}</a></h1>        "{% url 'post_detail' pk=post.pk %}" href에 옆의 코드를 넣는다면?
                                                                                post_detail은 뷰 이름이다(실제로는 메서드같은겅미) pk는 용어에 정리함
                                                                                Post 모델에서 기본키를 지정하지 않았기 때문에 장고는 pk라는 필드를 추가해
                                                                                새로운 블로그 게시물이 추가될 때마다 그 값이 1,2,3 등으로 증가하게 된다.
                                                                                pk도 그 쿼리셋의 title 이런것과 비슷하게 사용한다.
                                                                                post.pk처럼 post.title? 도 사용가능한듯
                                <p>{{ post.text|linebreaksbr }}</p>             |와 같은 파이프문자도 사용한다. linebreaksbr은 행이 바뀌면 문단으로 변환하라는 뜻이다.
                            </div>                  와 같은 코드를 쓴다. 

                            이제 CSS를 통해 이쁘게 꾸며보자.
                            <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
                            <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">
                            코드를 헤더에 넣는다. 이는 새 파일을 추가하는게 아닌, 인터넷에 있는 파일을 연결하는 것이다. 한결 보기 좋아졌을 것이다.
                            
                            {% load static %}       를 통해 아래에 있는 정적 파일을 로드한다.
                            <link rel="stylesheet" href="{% static 'css/blog.css' %}">      를 헤더에 추가한다. 만든 CSS 파일을 가져왔다.

                            <link href="//fonts.googleapis.com/css?family=Lobster&subset=latin,latin-ext" rel="stylesheet" type="text/css">

                ├── post_detail.html
                        (대충 extends)
                        (대충 블록):        :으로 표시했지만 사실상 감싸고있음
                            <div class="post">
                                {% if post.published_date %}        if? if뒤의 게시일 있는지 확인하는거임
                                    <div class="date">
                                        {{ post.published_date }}
                                    </div>
                                {% endif %}
                                {% if user.is_authenticated %}      보안을 위해 
                                    <a class="btn btn-default" href="{% url 'post_edit' pk=post.pk %}"><span class="glyphicon glyphicon-pencil"></span></a>     수정버튼
                                {% endif %}
                                <h1>{{ post.title }}</h1>
                                <p>{{ post.text|linebreaksbr }}</p>
                            </div>

                ├── base.html       기본적인 내용은 post_list.html과 같다. 약간의 수정이 있을 뿐.
                            (대충 html 코드)
                            {% block content %}
                            {% endblock %}
                            (대충 html 코드)
                            와 같은 코드가 있다고 치자.
                            다.른. html에 위와같은 블럭으로 감싼 코드(저 블럭 안에 코드가 있다는 의미)를 제외하고, 아래의 코드를 통해 나머지 코드를 base.html로부터 상속받는다.
                            {% extends 'blog/base.html' %}

                            쉽게 말해
                                base.html
                                    (대충 코드)
                                    (대충 블럭)
                                    (대충 코드)
                                
                                (대충 html).html
                                    (대충extends)
                                    (대충 블럭):
                                        (대충 멋진코드)
                            와 같은 파일 두개와 코드가 있다면, base.html에 있는 블럭의 위치에 기반해 대충.html로 나머지 코드를 상속한다. 즉 대충.html은 다음과 같은 코드와 같다.
                                (대충 상속받은html).html
                                    (대충 코드)
                                    (대충 멋진코드)
                                    (대충 코드)

                            <a href="{% url 'post_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>      page-header라는 div class에 이거 추가
                                    보안이 필요하다. 다음과 같이 변경한다.
                            {% if user.is_authenticated %}      브라우저에 페이지를 요청하는 사용자가 로그인 하는 경우 발생한다.
                                <a href="{% url 'post_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>
                            {% endif %}
                └── post_edit.html
                            (대충 extends)
                            (대충 블럭):
                                <h1>New post</h1>
                                <form method="POST" class="post-form">{% csrf_token %}      여기옆에 이상한놈은 보안을 위해 쓴대!  그리고 method="POST"는 view가 req할 때 씀
                                                                                            POST는 참고로 POST GET 그 POST임
                                    {{ form.as_p }}                                         얘가 폼 보여주는...거..?
                                    <button type="submit" class="save btn btn-default">Save</button>            그냥 저장 버튼
                                </form>

        └── static      css, 이미지 파일과 같이 사용자의 요청 내용에 따라 바뀌는 게 아닌 정적 파일들을 관리하는 디렉터리이다.
            └── css
                └── blog.css
                            css는 클래스 개념을 가지고 있다.
                            클래스는 html코드의 일부에 아래 a 처럼 이름을 붙이고 그 부분만 특정 스타일을 적용할 수 있게 해준다.
                            아래와 같이 할 수도 있지만, .first_class, .second_class {color: blak} 과 같은 클래스 선택자 . 을 사용할 수도 있다.
                            ,로 여러개를 한번에 할 수도있다. : 도 사용하기도 한다. 자세한건 css공부를 따로 해보자.
                            다만 html 본문에서는, <a></a>가 아닌, <div class="first_class"></div>와 같이 해야한다.
                            h1 a {      CSS 셀렉터(Selector)라고 한다.
                                color: #FCA205;
                                font-family: 'Lobster';
                            }
                                    <h1><a href="">link</a></h1> 와 같이 a박스..? 안의 내용의 색을 변경한다.
                            body {padding-left: 15px;}      를 통해 왼쪽 여백을 줄 수 있다.


장고 프레임워크 생성
    pytohn (장고어드민풀주소)\django-admin.py startproject mysite .

데이터 베이스 생성
    python manage.py migrate

어플리케이션 생성
    python manage.py startapp (어플리케이션 디렉터리 이름)(ex blog)

만든 모델의 데이터를 데이터베이스에 저장
    python manage.py makemigrations blog
        마이그레이션 파일 생성
    python manage.py migrate blog
        실제로 데이터 베이스에 저장

장고 쉘
    python manage.py shell
    명령 실행시
    (InteractiveConsole)
    >>>
    와 같이 생긴 인터렉티브 콘솔로 접속하게 된다.
        from blog.models import Post
        Post.objects.all()      게시된 글 목록 출력
        Post.objects.create(author=me, title='Sample title', text='Test')       현재 me가 없다 아래 코드 실행 이후에 이 코드를 실행시키자
        from django.contrib.auth.models import User
        User.objects.all()      사용자들 출력
        me = User.objects.get(username='ola')   ola는 예제를 만든 사람의 슈퍼유저 이름이다. 내 슈퍼유저를 쓰도록 하자.
        Post.objects.create(author=me, title='Sample title', text='Test')       게시물 생성
        Post.objects.all()      하나 추가 되어있음
    필터링 하기
        Post.objects.filter(author=me)      author을 제외하더라도 title, text와 같은 속성? 키? 를 통해 원하는 글만 볼 수 있다.
                추가로, title에 (특정말) 이 포.함.된. 제목을 보고싶다면 title__contains를 사용한다. __는 필드이름title과 연산자과 필터인 contains를 구별하는 기호이다.
    게시물 수정     이렇게 수정하는 이유는 위에서는 create를 통해 게시물을 생성했지만, 게시하지 않아 시간 필터? 를 사용하여 검색 할 때 결과가 나오지 않기 때문에 게시한다.
        post = Post.objects.get(title="Sample title")       수정할 게시물의 인스턴스를 얻는 코드
        post.publish()      게시물 게시 (모델에 퍼블리쉬 나옴)
    정렬하기
        Post.objects.order_by('created_date')       를 통해 생성된 시간으로 오름차순 정렬할 수 있다.
        Post.objects.order_by('created_date')       -를 추가해 생성된 시간으로 내림차순 정렬할 수 있다.
    쿼리셋 연결하기
        Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')      필터적용을 하던, 정렬을 하던 해놓고, .을 써서 다른 정렬, 필터를 적용가능한듯
    exit        쉘 끄자




서버 시작
    python manage.py runserver